-----exceptions---

----NO DATA FOUND---

DECLARE
V_EMPNO NUMBER(5):=764;
V_EMPNAME VARCHAR2(10);
BEGIN
   SELECT ENAME INTO V_EMPNAME
   FROM EMP
   WHERE EMPNO=V_EMPNO;
   DBMS_OUTPUT.PUT_LINE(V_EMPNAME);
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('no records found');
END;

--VALUE ERROR --
CREATE OR REPLACE PROCEDURE SP_VALERROR(A_N PRODUCT_RETAIL.PROD_ID%TYPE) AS
COST_P PRODUCT_RETAIL.COST%TYPE;
BEGIN
SELECT  P_NAME INTO COST_P
FROM PRODUCT_RETAIL
WHERE PROD_ID=A_N;
DBMS_OUTPUT.PUT_LINE('PROD_NAME IS : '|| COST_P);
EXCEPTION 
WHEN VALUE_ERROR THEN
--DBMS_OUTPUT.PUT_LINE(SQLCODE || ' ' || SQLERRM);
RAISE_APPLICATION_ERROR(-20001,'DATATYPE_ERROR');
END;

EXEC SP_VALERROR(100);

-----------------------------------------------------------------------------------------
---NO_DATA FOUND---
CREATE OR REPLACE PROCEDURE SP_DUP(A NUMBER) AS
PRO_NAME VARCHAR2(20);
BEGIN
SELECT P_NAME INTO PRO_NAME FROM PRODUCT_RETAIL
WHERE PROD_ID=A;
DBMS_OUTPUT.PUT_LINE(PRO_NAME);
EXCEPTION 
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO DATA EXISTS IN TABLE');
END;

SELECT * FROM PRODUCT_RETAIL;
SET SERVEROUTPUT ON
EXEC SP_DUP(1);

-------------------------------------------------------------------------------------
--TOO MANY ROWS---
DECLARE
V_DEPTNO NUMBER(5):=20;
V_EMPNAME VARCHAR2(10);
BEGIN
    SELECT ENAME INTO V_EMPNAME
    FROM EMP
    WHERE DEPTNO=V_DEPTNO;
    DBMS_OUTPUT.PUT_LINE(V_EMPNAME);
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('too many records');
END;

--INVALID NUMBER--

CREATE OR REPLACE PROCEDURE SP_INVAID AS
NAME  VARCHAR2(20);
BEGIN
SELECT P_NAME INTO NAME
FROM PRODUCT_RETAIL 
WHERE PROD_ID='XYS';
DBMS_OUTPUT.PUT_LINE(NAME);
EXCEPTION 
WHEN INVALID_NUMBER THEN
DBMS_OUTPUT.PUT_LINE('ENTERING INVALID DATATYPES');
END;

EXEC SP_INVAID;
SET SERVEROUTPUT ON


create table abc(name varchar2(10),sal number);
DECLARE
begin
insert into abc values('XYZ','xyz');
exception
when invalid_number then
dbms_output.put_line('You are using invaid datatyes');
end;

DECLARE
V_SAL NUMBER(5);
V_EMPNO VARCHAR(10):='abc';
BEGIN
   SELECT SAL INTO V_SAL
   FROM EMP
   WHERE EMPNO=V_EMPNO;
   DBMS_OUTPUT.PUT_LINE(V_SAL);
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('no records found');
    WHEN INVALID_NUMBER THEN
     DBMS_OUTPUT.PUT_LINE('inserting wrong dataype');
    WHEN VALUE_ERROR THEN
      DBMS_OUTPUT.PUT_LINE('storing invalid value');  
END;

SELECT * FROM EMP;


---ZERO DIVIDE---

DECLARE
E NUMBER;
RES NUMBER;
BEGIN
E:=12;
RES := E/0;
EXCEPTION 
WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('ZERO DIVIDE ERROR');
END;

DECLARE
V_SAL NUMBER(5);
V_RES NUMBER(5);
V_COMM NUMBER(5);
BEGIN
    SELECT SAL,COMM INTO V_SAL,V_COMM
    FROM EMP
    WHERE EMPNO=7369;
    V_RES:=V_SAL/V_COMM; 
    DBMS_OUTPUT.PUT_LINE(V_RES);
    EXCEPTION 
    WHEN ZERO_DIVIDE THEN
     DBMS_OUTPUT.PUT_LINE('cannot divide');
END;
    
SELECT * FROM EMP;


--DUPLICATE VALUE ON INDEX---
DECLARE
BEGIN
INSERT INTO CUST_TRANSACTION VALUES(206,'ASH','LEGGERE','F','ASH@GMAIL.COM',9274364782,'BANGALORE','KAR','INDIA',NULL);
DBMS_OUTPUT.PUT_LINE('RECORD INSERTED SUCCESSFULLY');
EXCEPTION 
WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('ENTERED DUPLICATE REOCRD');
END;


BEGIN
  INSERT INTO EMP VALUES(7566,'jones','manager',7839,'16-04-17',16875,NULL,20,'male',NULL);
  DBMS_OUTPUT.PUT_LINE('row inserted');
  EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
   DBMS_OUTPUT.PUT_LINE('record already exists');
END;


SELECT * FROM CUST_TRANSACTION;


--Pass a empno and display the grade of the salary of passed employee.
If sal>30000 print ‘Grade A’, salary>20000 then ‘Grade B’ Sal>10000 then ‘Grade C’ else 
‘no grade’ using case in PLSQL, also include when others then exception.------
DECLARE
EMP_SAL NUMBER(20);
BEGIN
SELECT SAL INTO EMP_SAL
FROM EMP
WHERE EMPNO=7521;
IF EMP_SAL>3000 THEN
DBMS_OUTPUT.PUT_LINE('GRADE:'||'A');
ELSIF EMP_SAL<2000 THEN
DBMS_OUTPUT.PUT_LINE('GRADE:'||'B');
ELSIF EMP_SAL<1000 THEN
DBMS_OUTPUT.PUT_LINE('GRADE:'||'C');
ELSE
DBMS_OUTPUT.PUT_LINE('NO GRADE');
END IF;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('OTHERS ERROR');
END;

---WRITE A plsql BLOCK BY PASSING the ACCOUNT NO, IF it doesn’t START FROM S OR U OR P 
        THEN RAISE AN EXCEPTION AND HANDLE IT, ALSO INCLUDE WHEN OTHERS THEN EXCEPTION.--------
DECLARE
ACCOUT_NO VARCHAR2(20);
INVALID EXCEPTION;
BEGIN
ACCOUT_NO := 'ASJD0003847';
IF ACCOUT_NO LIKE 'S%' OR ACCOUT_NO LIKE 'U%'OR ACCOUT_NO LIKE 'P%' THEN
DBMS_OUTPUT.PUT_LINE('yes');
ELSE
RAISE INVALID;
END IF;
COMMIT;
EXCEPTION 
WHEN INVALID THEN
DBMS_OUTPUT.PUT_LINE('wrongly entered account_no');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('others');
END;

